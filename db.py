# db.py
import asyncpg
import os
from dotenv import load_dotenv

load_dotenv()

DB_URL = os.getenv("DATABASE_URL")

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (pool)
DB: asyncpg.Pool | None = None


# ---------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ ----------------
async def init_db():
    """–°–æ–∑–¥–∞—Ç—å –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å PostgreSQL"""
    global DB
    DB = await asyncpg.create_pool(DB_URL)
    return DB


async def close_db():
    """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î"""
    global DB
    if DB:
        await DB.close()
        DB = None


# ---------------- –ü—Ä–æ–≤–µ—Ä–∫–∏ ----------------
async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    assert DB is not None
    row = await DB.fetchrow("SELECT 1 FROM admins WHERE tg_id=$1", user_id)
    return bool(row)


# ---------------- –ú–∏–≥—Ä–∞—Ü–∏–∏ ----------------
async def migrate():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏)"""
    assert DB is not None

    # --- users ---
    await DB.execute("""
    CREATE TABLE IF NOT EXISTS users (
        tg_id BIGINT PRIMARY KEY,
        squad TEXT,
        code TEXT UNIQUE,
        bow TEXT,
        arrow TEXT,
        ready BOOLEAN DEFAULT FALSE,
        status TEXT DEFAULT 'idle'
    )
    """)

    # --- tasks ---
    await DB.execute("""
    CREATE TABLE IF NOT EXISTS tasks (
        id SERIAL PRIMARY KEY,
        message_id BIGINT,
        squad TEXT NOT NULL,
        point TEXT,
        color TEXT,
        start_time TEXT,      -- —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã –¥–ª—è –æ—Ç—á—ë—Ç–∞
        end_time TEXT,
        status TEXT,
        report TEXT,
        video_attached BOOLEAN DEFAULT FALSE,
        result TEXT,
        await_video BOOLEAN DEFAULT FALSE,
        ldk_file TEXT,
        true_point TEXT,
        true_color TEXT,
        created_at TIMESTAMP DEFAULT now()  -- üëà –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    )
    """)

    # --- admins ---
    await DB.execute("""
    CREATE TABLE IF NOT EXISTS admins (
        tg_id BIGINT PRIMARY KEY,
        name TEXT,
        is_main BOOLEAN DEFAULT FALSE
    )
    """)

    # --- bows ---
    await DB.execute("""
    CREATE TABLE IF NOT EXISTS bows (
        id SERIAL PRIMARY KEY,
        name TEXT UNIQUE
    )
    """)

    # --- arrows ---
    await DB.execute("""
    CREATE TABLE IF NOT EXISTS arrows (
        id SERIAL PRIMARY KEY,
        name TEXT UNIQUE
    )
    """)

    # --- pending ---
    await DB.execute("""
    CREATE TABLE IF NOT EXISTS pending (
        id SERIAL PRIMARY KEY,
        admin_id BIGINT,
        target_uid BIGINT UNIQUE,
        point TEXT,
        color TEXT,
        squad TEXT,
        phone TEXT,
        await_ldk BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT now(),  -- üëà –¥–∞—Ç–∞ –∑–∞—è–≤–∫–∏
        is_edit BOOLEAN DEFAULT FALSE
    )
    """)

    # –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω
    await DB.execute("""
    INSERT INTO admins (tg_id, name, is_main)
    VALUES (845332383, '–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω', TRUE)
    ON CONFLICT (tg_id) DO NOTHING
    """)

    # —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    for b in ["–£—Ç–∫–∞", "–ú–æ–ª–Ω–∏—è"]:
        await DB.execute("INSERT INTO bows (name) VALUES ($1) ON CONFLICT DO NOTHING", b)
    for a in ["–û–§–°–ü", "–û–§–ë–ß", "–°–í–£", "–ó–∞–∂–∏–≥–∞–ª–∫–∞", "–ö—É–º—É–ª—è—Ç–∏–≤", "–¢–ú62"]:
        await DB.execute("INSERT INTO arrows (name) VALUES ($1) ON CONFLICT DO NOTHING", a)
