from datetime import datetime
import random
import string
import phonenumbers
from phonenumbers.phonenumberutil import NumberParseException
from aiogram import types, Bot
from aiogram.types import BotCommand
import db
from enums import TaskStatus


# ---------------- –í—Ä–µ–º—è –∏ –∫–æ–¥—ã ----------------
def now_hm() -> str:
    """–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM"""
    return datetime.now().strftime("%H:%M")


def generate_code(squad: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –æ—Ç—Ä—è–¥–∞: SQUAD-XXXX"""
    suffix = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
    return f"{squad.upper()}-{suffix}"


# ---------------- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ ----------------
async def reset_user_commands(bot: Bot, user_id: int):
    """–°–±—Ä–æ—Å –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ"""
    user_cmds = [
        types.BotCommand(command="start", description="–í–æ–π—Ç–∏ –ø–æ –∫–æ–¥—É"),
        types.BotCommand(command="report", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç"),
        types.BotCommand(command="mytasks", description="–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞–¥–∞—á"),
        types.BotCommand(command="config", description="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"),
        types.BotCommand(command="myid", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π Telegram ID"),
        types.BotCommand(command="support", description="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ì–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"),
        types.BotCommand(command="finish", description="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")
    ]
    await bot.set_my_commands(user_cmds, scope=types.BotCommandScopeChat(chat_id=user_id))


async def update_admin_commands(bot: Bot, admin_id: int, is_main: bool = False):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if is_main:
        admin_cmds = [
            BotCommand(command="task", description="–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É"),
            BotCommand(command="edittask", description="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É"),
            BotCommand(command="sendldk", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å .ldk –æ—Ç—Ä—è–¥—É"),
            BotCommand(command="status", description="–°–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö –æ—Ç—Ä—è–¥–æ–≤"),
            BotCommand(command="active", description="–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"),
            BotCommand(command="addadmin", description="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
            BotCommand(command="deladmin", description="–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
            BotCommand(command="adduser", description="–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Ä—è–¥"),
            BotCommand(command="admins", description="–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"),
            BotCommand(command="myid", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π Telegram ID"),
            BotCommand(command="support", description="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ì–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"),
        ]
    else:
        admin_cmds = [
            BotCommand(command="task", description="–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É"),
            BotCommand(command="edittask", description="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É"),
            BotCommand(command="sendldk", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å .ldk –æ—Ç—Ä—è–¥—É"),
            BotCommand(command="status", description="–°–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö –æ—Ç—Ä—è–¥–æ–≤"),
            BotCommand(command="active", description="–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"),
            BotCommand(command="adduser", description="–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Ä—è–¥"),
            BotCommand(command="admins", description="–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"),
            BotCommand(command="myid", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π Telegram ID"),
            BotCommand(command="support", description="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ì–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"),
        ]

    await bot.set_my_commands(admin_cmds, scope=types.BotCommandScopeChat(chat_id=admin_id))


async def update_user_status(user_id: int):
    """–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç—Ä—è–¥–∞ –ø–æ –µ–≥–æ –∑–∞–¥–∞—á–∞–º"""
    assert db.DB is not None

    rows = await db.DB.fetch(
        """
        SELECT t.status
        FROM tasks t
        JOIN users u ON u.squad = t.squad
        WHERE u.tg_id=$1
        """,
        user_id
    )
    tasks = [r["status"] for r in rows]

    if not tasks:
        await db.DB.execute("UPDATE users SET ready=FALSE, status='idle' WHERE tg_id=$1", user_id)
        return

    if any(st == TaskStatus.ACCEPTED for st in tasks):
        await db.DB.execute("UPDATE users SET ready=TRUE, status='busy' WHERE tg_id=$1", user_id)
    else:
        await db.DB.execute("UPDATE users SET ready=TRUE, status='idle' WHERE tg_id=$1", user_id)


async def set_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    user_cmds = [
        BotCommand(command="start", description="–í–æ–π—Ç–∏"),
        BotCommand(command="report", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç"),
        BotCommand(command="mytasks", description="–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞–¥–∞—á"),
        BotCommand(command="config", description="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"),
        BotCommand(command="myid", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π Telegram ID"),
        BotCommand(command="support", description="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ì–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"),
        BotCommand(command="finish", description="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")
    ]

    # –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö
    await bot.set_my_commands(user_cmds)

    rows = await db.DB.fetch("SELECT tg_id, is_main FROM admins")
    admin_ids = {r["tg_id"] for r in rows}

    for r in rows:
        try:
            await update_admin_commands(bot, r["tg_id"], is_main=bool(r["is_main"]))
        except Exception as e:
            print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∞ {r['tg_id']}: {e}")

    rows = await db.DB.fetch("SELECT tg_id FROM users WHERE tg_id IS NOT NULL")
    user_ids = {r["tg_id"] for r in rows}

    for uid in user_ids - admin_ids:
        try:
            await bot.set_my_commands(user_cmds, scope=types.BotCommandScopeChat(chat_id=uid))
        except Exception as e:
            print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")


# ---------------- –û—Ç—á—ë—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ----------------
def make_report(
    squad: str,
    bow: str,
    arrow: str,
    point: str,
    color: str,
    start_time: str,
    end_time: str,
    result: str | None,
    video_attached: bool,
    true_point: str | None = None,
    true_color: str | None = None,
) -> str:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á—ë—Ç–∞"""
    res_line = f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}" if result else "–†–µ–∑—É–ª—å—Ç–∞—Ç: ‚Äî"
    vid_line = "–í–∏–¥–µ–æ: –ø—Ä–∏–ª–æ–∂–µ–Ω–æ" if video_attached else "–í–∏–¥–µ–æ: –Ω–µ –ø—Ä–∏–ª–æ–∂–∏–ª–∏"

    true_line = (
        f"–†–µ–∞–ª—å–Ω–∞—è —Ü–µ–ª—å: {true_point} ({true_color.lower()})\n" if true_point and true_color else "–†–µ–∞–ª—å–Ω–∞—è —Ü–µ–ª—å: –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è"
    )

    return (
        f"üìã –û—Ç—á–µ—Ç –æ—Ç {squad}\n"
        f"–ü—Ç–∏—Ü–∞: {bow}\n–°–Ω–∞—Ä—è–¥: {arrow}\n"
        f"–¶–µ–ª—å: {point} ({color.lower()})\n"
        f"{true_line}\n"
        f"–í—ã–ª–µ—Ç: {start_time}\n"
        f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_time}\n"
        f"{res_line}\n{vid_line}"
    )


async def notify_admins(bot: Bot, text: str, video: str | None = None, reply_markup=None, exclude: list[int] = None):
    exclude = exclude or []
    rows = await db.DB.fetch("SELECT tg_id FROM admins")
    for r in rows:
        admin_id = r["tg_id"]
        if admin_id in exclude:
            continue
        try:
            if video:
                await bot.send_video(admin_id, video, caption=text, parse_mode="HTML", reply_markup=reply_markup)
            else:
                await bot.send_message(admin_id, text, parse_mode="HTML", reply_markup=reply_markup)
        except Exception as e:
            print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")


# ---------------- –†–µ–≥–∏–æ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã ----------------
def detect_region(message: types.Message) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–≥–∏–æ–Ω –ø–æ language_code (RU –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"""
    lang = (message.from_user.language_code or "").lower()
    mapping = {
        "ru": "RU",
        "uk": "UA",
        "be": "BY",
        "kk": "KZ",
        "uz": "UZ",
        "en": "US",
    }
    return mapping.get(lang, "RU")


def validate_phone(raw: str, region: str = "RU") -> str | None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (E.164)"""
    try:
        if raw.strip().startswith("+"):
            num = phonenumbers.parse(raw, None)
        else:
            num = phonenumbers.parse(raw, region)

        if phonenumbers.is_valid_number(num):
            return phonenumbers.format_number(num, phonenumbers.PhoneNumberFormat.E164)
        return None
    except NumberParseException:
        return None
