from aiogram import Bot, types
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from utils import notify_admins, generate_code, update_admin_commands, reset_user_commands
from db import is_admin
from enums import TaskStatus
import db
import random, string


async def add_admin(message: types.Message, bot: Bot):
    assert db.DB is not None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∏–º–µ–Ω–Ω–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω
    async with db.DB.execute("SELECT is_main FROM admins WHERE tg_id=?", (message.from_user.id,)) as cur:
        row = await cur.fetchone()
    if not row or row[0] != 1:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–æ–≤.")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /addadmin <tg_id>")
        return

    new_admin_id = int(args[1])

    # üö´ –ó–∞–ø—Ä–µ—Ç: –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–∞–º —Å–µ–±—è
    if new_admin_id == message.from_user.id:
        await message.answer("‚ùå –¢—ã —É–∂–µ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω, –Ω–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
        return

    # üö´ –ó–∞–ø—Ä–µ—Ç: –Ω–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç—Ä—è–¥ –∞–¥–º–∏–Ω–æ–º
    async with db.DB.execute("SELECT 1 FROM users WHERE tg_id=?", (new_admin_id,)) as cur:
        if await cur.fetchone():
            await message.answer("‚ùå –û—Ç—Ä—è–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º.")
            return

    # –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å username
    try:
        chat = await bot.get_chat(new_admin_id)
        username = chat.username or None
    except Exception:
        username = None

    import random, string
    name = username or random.choice(["–û—Ä–µ–ª", "–Ø—Å—Ç—Ä–µ–±", "–°–æ–∫–æ–ª", "–í–æ–ª–∫", "–¢–∏–≥—Ä"]) + "-" + ''.join(random.choices(string.ascii_uppercase, k=3))

    await db.DB.execute(
        "INSERT OR REPLACE INTO admins (tg_id, name, is_main) VALUES (?, ?, 0)",
        (new_admin_id, name)
    )
    await db.DB.commit()

    # üëá –¢–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–∑–æ–≤
    try:
        await update_admin_commands(bot, new_admin_id)
    except Exception as e:
        print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ {new_admin_id}: {e}")

    await bot.send_message(new_admin_id, "üëë –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–±—è –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω –ø–æ–¥ –∏–º–µ–Ω–µ–º {name}")


async def del_admin_cmd(message: types.Message):
    assert db.DB is not None

    # –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω
    async with db.DB.execute("SELECT is_main FROM admins WHERE tg_id=?", (message.from_user.id,)) as cur:
        row = await cur.fetchone()
    if not row or row[0] != 1:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤, –∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–≥–æ
    async with db.DB.execute("SELECT tg_id, name FROM admins WHERE is_main=0") as cur:
        admins = await cur.fetchall()

    if not admins:
        await message.answer("‚ö† –î—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –Ω–µ—Ç.")
        return

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{name or '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π'} ({uid})", callback_data=f"deladm:{uid}")]
            for uid, name in admins
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)


async def del_admin_cb(callback: CallbackQuery, bot: Bot):
    removed_id = int(callback.data.split(":")[1])

    await db.DB.execute("DELETE FROM admins WHERE tg_id=?", (removed_id,))
    await db.DB.commit()

    try:
        await reset_user_commands(bot, removed_id)
    except Exception:
        pass

    await callback.message.edit_text(f"‚úÖ –ê–¥–º–∏–Ω {removed_id} —É–¥–∞–ª—ë–Ω.")
    try:
        await bot.send_message(removed_id, "‚ö† –£ —Ç–µ–±—è –±–æ–ª—å—à–µ –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    except Exception:
        pass


async def list_admins(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    assert db.DB is not None
    async with db.DB.execute("SELECT tg_id, name FROM admins") as cur:
        rows = await cur.fetchall()

    if not rows:
        await message.answer("–ê–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        text = "üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n\n" + "\n".join(
            f"{r[0]}{(' ‚Äî ' + r[1]) if r[1] else ''}" for r in rows
        )
        await message.answer(text)


async def show_ready_squads(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    assert db.DB is not None
    async with db.DB.execute("""
        SELECT u.squad, u.bow, u.arrow
        FROM users u
        WHERE u.ready=1
    """) as cur:
        rows = await cur.fetchall()

    if not rows:
        await message.answer("–ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –æ—Ç—Ä—è–¥–æ–≤.")
        return

    text = "üìã –ì–æ—Ç–æ–≤—ã–µ –æ—Ç—Ä—è–¥—ã:\n\n" + "\n".join(
        f"{squad} | –ü—Ç–∏—Ü–∞: {bow or '‚Äî'} | –°–Ω–∞—Ä—è–¥: {arrow or '‚Äî'}"
        for squad, bow, arrow in rows
    )
    await message.answer(text)



async def show_active_tasks(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    assert db.DB is not None
    async with db.DB.execute(
        "SELECT squad, point, color, start_time, status "
        "FROM tasks WHERE status = ?",
        (TaskStatus.ACCEPTED,)
    ) as cur:
        rows = await cur.fetchall()

    if not rows:
        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç.")
    else:
        lines = []
        for squad, point, color, start_time, status in rows:
            status_emoji = "‚è≥" if status == TaskStatus.PENDING else "‚úÖ"
            lines.append(
                f"{status_emoji} {squad} ‚Üí {point} ({color}) | —Å—Ç–∞—Ä—Ç: {start_time or '‚Äî'}"
            )

        text = "üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n" + "\n".join(lines)
        await message.answer(text)


async def add_user(message: types.Message, bot: Bot):
    if not await is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /adduser <tg_id> <–Ω–∞–∑–≤–∞–Ω–∏–µ_–æ—Ç—Ä—è–¥–∞>")
        return

    try:
        new_tg_id = int(args[1])
    except ValueError:
        await message.answer("‚ö† tg_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if new_tg_id == message.from_user.id:
        await message.answer("‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è –æ—Ç—Ä—è–¥–æ–º.")
        return

    async with db.DB.execute("SELECT is_main FROM admins WHERE tg_id=?", (new_tg_id,)) as cur:
        row = await cur.fetchone()
    if row and row[0] == 1:
        await message.answer("‚ùå –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω –æ—Ç—Ä—è–¥–æ–º.")
        return

    squad_name = args[2]
    code = generate_code(squad_name)

    await db.DB.execute(
        "INSERT OR REPLACE INTO users (tg_id, squad, code, bow, arrow, ready, status) "
        "VALUES (?, ?, ?, NULL, NULL, 0, 'idle')",
        (new_tg_id, squad_name, code)
    )
    await db.DB.commit()

    await notify_admins(bot, f"üë§ –ù–æ–≤—ã–π –æ—Ç—Ä—è–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {squad_name} (ID {new_tg_id})")

    try:
        await bot.send_message(
            new_tg_id,
            f"üîπ –¢–µ–±—è –¥–æ–±–∞–≤–∏–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –æ—Ç—Ä—è–¥ {squad_name}.\n"
            f"–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É."
        )
    except Exception as e:
        await message.answer(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {new_tg_id}: {e}")

    await message.answer(f"‚úÖ –û—Ç—Ä—è–¥ {squad_name} –¥–æ–±–∞–≤–ª–µ–Ω (ID {new_tg_id})")
