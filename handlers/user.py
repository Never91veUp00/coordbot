from aiogram import Bot, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from keyboards import bows_keyboard, arrows_keyboard, ready_kb
from utils import notify_admins
from enums import TaskStatus
import db


async def finish_cmd(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /finish ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É"""
    await db.DB.execute(
        "UPDATE users SET ready=FALSE, status='idle' WHERE tg_id=$1",
        message.from_user.id
    )
    await message.answer("üõë –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –¢–µ–ø–µ—Ä—å –æ—Ç—Ä—è–¥ –Ω–µ —á–∏—Å–ª–∏—Ç—Å—è –≥–æ—Ç–æ–≤—ã–º.")


async def start_cmd(message: types.Message):
    assert db.DB is not None
    row = await db.DB.fetchrow(
        "SELECT squad, bow, arrow FROM users WHERE tg_id=$1", message.from_user.id
    )

    if row:
        squad, bow, arrow = row["squad"], row["bow"], row["arrow"]
        if not bow:
            await message.answer(
                f"‚úÖ –û—Ç—Ä—è–¥ {squad} –Ω–∞–π–¥–µ–Ω.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø—Ç–∏—Ü—É:",
                reply_markup=await bows_keyboard()
            )
        elif not arrow:
            await message.answer(
                f"‚úÖ –û—Ç—Ä—è–¥ {squad} –Ω–∞–π–¥–µ–Ω.\n–ü—Ç–∏—Ü–∞: {bow}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–Ω–∞—Ä—è–¥:",
                reply_markup=await arrows_keyboard()
            )
        else:
            await message.answer(
                f"üîπ –¢—ã —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –∑–∞ –æ—Ç—Ä—è–¥–æ–º {squad}.\n"
                f"–ü—Ç–∏—Ü–∞: {bow}, –°–Ω–∞—Ä—è–¥: {arrow}",
                reply_markup=ready_kb()
            )
    else:
        # –Ω–æ–≤—ã–π —é–∑–µ—Ä ‚Üí –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úè –£–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Ä—è–¥–∞", callback_data="register_request")]
        ])
        await message.answer(
            "‚ö† –¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n"
            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –æ—Ç—Ä—è–¥–∞:",
            reply_markup=kb
        )


async def reconfig(message: types.Message):
    assert db.DB is not None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    row = await db.DB.fetchrow("SELECT squad FROM users WHERE tg_id=$1", message.from_user.id)

    if not row:
        await message.answer("‚ö† –¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    squad = row["squad"]

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await db.DB.execute(
        "UPDATE users SET bow=NULL, arrow=NULL, ready=FALSE WHERE tg_id=$1",
        message.from_user.id
    )

    await message.answer(
        f"‚úÖ –û—Ç—Ä—è–¥ {squad} –Ω–∞–π–¥–µ–Ω.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø—Ç–∏—Ü—É:",
        reply_markup=await bows_keyboard()
    )


async def my_id(message: types.Message):
    await message.answer(f"–¢–≤–æ–π Telegram ID: {message.from_user.id}")


async def support_cmd(message: types.Message):
    assert db.DB is not None

    row = await db.DB.fetchrow("SELECT tg_id, name FROM admins WHERE is_main=TRUE LIMIT 1")
    if not row:
        await message.answer("‚ö† –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –µ—â—ë –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.")
        return

    tg_id, name = row["tg_id"], row["name"]

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ get_chat
    try:
        chat = await message.bot.get_chat(tg_id)
        username = chat.username
    except Exception:
        username = None

    if username:
        link = f"https://t.me/{username}"
    else:
        link = f"tg://user?id={tg_id}"

    text = (
        f"üëë –î–ª—è —Å–≤—è–∑–∏ —Å –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º:\n"
        f"{name or '–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω'} ‚Äî <a href=\"{link}\">–Ω–∞–ø–∏—Å–∞—Ç—å</a>"
    )
    await message.answer(text, parse_mode="HTML")


async def set_bow(callback: CallbackQuery):
    bow = callback.data.split(":", 1)[1]
    assert db.DB is not None
    await db.DB.execute("UPDATE users SET bow=$1 WHERE tg_id=$2", bow, callback.from_user.id)
    await callback.message.edit_text(
        f"–ü—Ç–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–∞: {bow}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–Ω–∞—Ä—è–¥:",
        reply_markup=await arrows_keyboard()
    )
    await callback.answer()


async def set_arrow(callback: CallbackQuery):
    arrow = callback.data.split(":", 1)[1]
    assert db.DB is not None
    await db.DB.execute("UPDATE users SET arrow=$1 WHERE tg_id=$2", arrow, callback.from_user.id)
    await callback.message.edit_text(
        f"–°–Ω–∞—Ä—è–¥ –≤—ã–±—Ä–∞–Ω: {arrow}\n–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É.",
        reply_markup=ready_kb()
    )
    await callback.answer()


# ---------------- –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞–¥–∞—á ----------------
async def my_tasks(message: types.Message):
    uid = message.from_user.id
    row = await db.DB.fetchrow("SELECT squad FROM users WHERE tg_id=$1", uid)
    if not row:
        await message.answer("‚ö† –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    squad = row["squad"]

    tasks = await db.DB.fetch(
        "SELECT id, point, color, status FROM tasks "
        "WHERE squad=$1 AND status IN ($2, $3) ORDER BY id",
        squad, TaskStatus.PENDING, TaskStatus.ACCEPTED
    )

    if not tasks:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    text = "üìã –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for t in tasks:
        text += f"{t['status']} ‚Äî {t['point']} ({t['color']})\n"

    await message.answer(text)