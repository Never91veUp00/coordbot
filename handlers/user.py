from aiogram import Bot, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from keyboards import bows_keyboard, arrows_keyboard, ready_kb
from utils import notify_admins
import db

async def start_cmd(message: types.Message):
    assert db.DB is not None
    async with db.DB.execute(
        "SELECT squad, bow, arrow FROM users WHERE tg_id=?", (message.from_user.id,)
    ) as cur:
        row = await cur.fetchone()

    if row:
        squad, bow, arrow = row
        if not bow:
            await message.answer(
                f"‚úÖ –û—Ç—Ä—è–¥ {squad} –Ω–∞–π–¥–µ–Ω.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø—Ç–∏—Ü—É:",
                reply_markup=await bows_keyboard()
            )
        elif not arrow:
            await message.answer(
                f"‚úÖ –û—Ç—Ä—è–¥ {squad} –Ω–∞–π–¥–µ–Ω.\n–ü—Ç–∏—Ü–∞: {bow}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–Ω–∞—Ä—è–¥:",
                reply_markup=await arrows_keyboard()
            )
        else:
            await message.answer(
                f"üîπ –¢—ã —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –∑–∞ –æ—Ç—Ä—è–¥–æ–º {squad}.\n"
                f"–ü—Ç–∏—Ü–∞: {bow}, –°–Ω–∞—Ä—è–¥: {arrow}",
                reply_markup=ready_kb()
            )
    else:
        # –Ω–æ–≤—ã–π —é–∑–µ—Ä ‚Üí –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úè –£–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Ä—è–¥–∞", callback_data="register_request")]
        ])
        await message.answer(
            "‚ö† –¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n"
            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –æ—Ç—Ä—è–¥–∞:",
            reply_markup=kb
        )


async def reconfig(message: types.Message):
    assert db.DB is not None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    async with db.DB.execute("SELECT squad FROM users WHERE tg_id=?", (message.from_user.id,)) as cur:
        row = await cur.fetchone()

    if not row:
        await message.answer("‚ö† –¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    squad = row[0]

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await db.DB.execute(
        "UPDATE users SET bow=NULL, arrow=NULL, ready=0 WHERE tg_id=?",
        (message.from_user.id,)
    )
    await db.DB.commit()

    await message.answer(
        f"‚úÖ –û—Ç—Ä—è–¥ {squad} –Ω–∞–π–¥–µ–Ω.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø—Ç–∏—Ü—É:",
        reply_markup=await bows_keyboard()
    )

from utils import finish_work

async def finish_cmd(message: types.Message):
    await finish_work(message.from_user.id)
    await db.DB.commit()
    await message.answer("üõë –†–∞–±–æ—Ç–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –¢–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á–∏, –ø–æ–∫–∞ —Å–Ω–æ–≤–∞ –Ω–µ –Ω–∞–∂–º—ë—à—å ¬´–ì–æ—Ç–æ–≤¬ª.")


async def my_id(message: types.Message):
    await message.answer(f"–¢–≤–æ–π Telegram ID: {message.from_user.id}")


async def support_cmd(message):
    assert db.DB is not None

    async with db.DB.execute("SELECT tg_id, name FROM admins WHERE is_main=1 LIMIT 1") as cur:
        row = await cur.fetchone()

    if not row:
        await message.answer("‚ö† –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –µ—â—ë –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.")
        return

    tg_id, name = row

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ get_chat
    try:
        chat = await message.bot.get_chat(tg_id)
        username = chat.username
    except Exception:
        username = None

    if username:
        link = f"https://t.me/{username}"
    else:
        # –§–æ–ª–±—ç–∫ ‚Äî —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ, –µ—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        link = f"tg://user?id={tg_id}"

    text = (
        f"üëë –î–ª—è —Å–≤—è–∑–∏ —Å –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º:\n"
        f"{name or '–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω'} ‚Äî <a href=\"{link}\">–Ω–∞–ø–∏—Å–∞—Ç—å</a>"
    )
    await message.answer(text, parse_mode="HTML")


async def set_bow(callback: CallbackQuery):
    bow = callback.data.split(":", 1)[1]
    assert db.DB is not None
    await db.DB.execute("UPDATE users SET bow=? WHERE tg_id=?", (bow, callback.from_user.id))
    await db.DB.commit()
    await callback.message.edit_text(
        f"–ü—Ç–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–∞: {bow}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–Ω–∞—Ä—è–¥:",
        reply_markup=await arrows_keyboard()
    )
    await callback.answer()


async def set_arrow(callback: CallbackQuery):
    arrow = callback.data.split(":", 1)[1]
    assert db.DB is not None
    await db.DB.execute("UPDATE users SET arrow=? WHERE tg_id=?", (arrow, callback.from_user.id))
    await db.DB.commit()
    await callback.message.edit_text(
        f"–°–Ω–∞—Ä—è–¥ –≤—ã–±—Ä–∞–Ω: {arrow}\n–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É.",
        reply_markup=ready_kb()
    )
    await callback.answer()