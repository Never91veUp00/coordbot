# tasks.py
from aiogram import Bot, types
from keyboards import ready_squads_keyboard, task_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from utils import notify_admins, now_hm, update_user_status
from db import is_admin
from datetime import datetime
from enums import TaskStatus
import db


# ---------------- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ----------------
async def task_cmd(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /task ‚Äî –≤—ã–±–æ—Ä –æ—Ç—Ä—è–¥–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    if not await is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    kb = await ready_squads_keyboard()
    if not kb.inline_keyboard:
        await message.answer("‚ö† –ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –æ—Ç—Ä—è–¥–æ–≤.")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ –æ—Ç—Ä—è–¥ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", reply_markup=kb)


async def choose_target(callback: CallbackQuery):
    """–ê–¥–º–∏–Ω –≤—ã–±—Ä–∞–ª –æ—Ç—Ä—è–¥ ‚Üí –≤–Ω–æ—Å–∏–º –≤ pending"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    target_uid = int(callback.data.split(":")[1])
    assert db.DB is not None

    async with db.DB.execute("SELECT u.squad FROM users u WHERE u.tg_id=?", (target_uid,)) as cur:
        row = await cur.fetchone()
    squad = row[0] if row else None

    await db.DB.execute(
        "INSERT INTO pending (admin_id, target_uid, squad, created_at) "
        "VALUES (?, ?, ?, ?)",
        (callback.from_user.id, target_uid, squad, datetime.now().isoformat(timespec="seconds"))
    )
    await db.DB.commit()

    await callback.message.edit_text(
        "‚úè –í–≤–µ–¥–∏ —Ü–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `<—Ç–æ—á–∫–∞> <—Ü–≤–µ—Ç>`.",
        parse_mode="Markdown"
    )
    await callback.answer()


async def handle_admin_task_message(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–ª–∏ –∞–¥–º–∏–Ω–æ–º"""
    text = (message.text or "").strip()
    if not text:
        return

    async with db.DB.execute(
        "SELECT p.id, p.target_uid, p.squad, p.point, p.color, p.is_edit "
        "FROM pending p WHERE p.admin_id=? ORDER BY p.created_at DESC LIMIT 1",
        (message.from_user.id,)
    ) as cur:
        row = await cur.fetchone()

    if not row:
        return

    pending_id, target_uid, squad, old_point, old_color, is_edit = row
    parts = text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ö† –§–æ—Ä–º–∞—Ç: <—Ç–æ—á–∫–∞> <—Ü–≤–µ—Ç>")
        return

    new_point, new_color = parts[0], parts[1]

    # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    cur = await db.DB.execute(
        "INSERT INTO tasks(squad, point, color, status) VALUES (?,?,?,?)",
        (squad, new_point, new_color, TaskStatus.PENDING)
    )
    task_id = cur.lastrowid
    await db.DB.commit()

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä—è–¥—É
    if is_edit:
        sent = await bot.send_message(
            target_uid,
            f"‚úè –ó–∞–¥–∞—á–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞!\n"
            f"–°—Ç–∞—Ä–∞—è —Ü–µ–ª—å: {old_point} ({old_color})\n"
            f"–ù–æ–≤–∞—è —Ü–µ–ª—å: {new_point} ({new_color})",
            reply_markup=task_keyboard(task_id)
        )
    else:
        sent = await bot.send_message(
            target_uid,
            f"üìã –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è {squad}\n–¶–µ–ª—å: {new_point} ({new_color})",
            reply_markup=task_keyboard(task_id)
        )

    await db.DB.execute("UPDATE tasks SET message_id=? WHERE id=?", (sent.message_id, task_id))
    await db.DB.execute("DELETE FROM pending WHERE id=?", (pending_id,))
    await db.DB.commit()

    await message.answer(
        f"‚úÖ {'–ó–∞–¥–∞—á–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞' if is_edit else '–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞'} –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {squad}."
    )


# ---------------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ----------------
async def edit_task_cmd(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /edittask ‚Äî –≤—ã–±–æ—Ä –æ—Ç—Ä—è–¥–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏"""
    if not await is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    assert db.DB is not None
    async with db.DB.execute(
        "SELECT DISTINCT t.squad FROM tasks t WHERE t.status IN (?, ?)",
        (TaskStatus.PENDING, TaskStatus.ACCEPTED)
    ) as cur:
        squads = [row[0] async for row in cur]

    if not squads:
        await message.answer("‚ö† –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=s, callback_data=f"edit_squad:{s}")] for s in squads
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –æ—Ç—Ä—è–¥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞—á:", reply_markup=kb)


async def edit_task_choose_squad(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –æ—Ç—Ä—è–¥–∞ ‚Üí —Å–ø–∏—Å–æ–∫ –µ–≥–æ –∑–∞–¥–∞—á"""
    squad = callback.data.split(":")[1]
    assert db.DB is not None

    async with db.DB.execute(
        "SELECT t.id, t.point, t.color FROM tasks t "
        "WHERE t.squad=? AND t.status IN (?, ?)",
        (squad, TaskStatus.PENDING, TaskStatus.ACCEPTED)
    ) as cur:
        rows = await cur.fetchall()

    if not rows:
        await callback.message.answer("‚ö† –£ —ç—Ç–æ–≥–æ –æ—Ç—Ä—è–¥–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{point} ({color})", callback_data=f"edit_task:{task_id}")]
            for task_id, point, color in rows
        ]
    )
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –æ—Ç—Ä—è–¥–∞ {squad} –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
    await callback.answer()


async def edit_task_select(callback: CallbackQuery, bot: Bot):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    task_id = int(callback.data.split(":")[1])
    assert db.DB is not None

    # –¥–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–æ–π –∑–∞–¥–∞—á–∏
    async with db.DB.execute(
        "SELECT t.message_id, u.tg_id, t.point, t.color, t.squad "
        "FROM tasks t JOIN users u ON u.squad = t.squad WHERE t.id=?",
        (task_id,)
    ) as cur:
        row = await cur.fetchone()

    if not row:
        await callback.answer("‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    msg_id, user_id, old_point, old_color, squad = row

    # —É–±–∏—Ä–∞–µ–º —É —é–∑–µ—Ä–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å" –¥–ª—è —Å—Ç–∞—Ä–æ–π –∑–∞–¥–∞—á–∏
    try:
        await bot.edit_message_reply_markup(chat_id=user_id, message_id=msg_id, reply_markup=None)
    except Exception:
        pass

    # –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
    await db.DB.execute("UPDATE tasks SET status=? WHERE id=?", (TaskStatus.ARCHIVED, task_id))

    # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ pending —Å –æ—Ç–º–µ—Ç–∫–æ–π, —á—Ç–æ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    await db.DB.execute(
        """
        INSERT INTO pending (admin_id, target_uid, point, color, squad, created_at, is_edit)
        VALUES (?, ?, ?, ?, ?, ?, 1)
        """,
        (callback.from_user.id, user_id, old_point, old_color, squad,
         datetime.now().isoformat(timespec="seconds"))
    )
    await db.DB.commit()

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await callback.message.edit_text(
        "‚úè –í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Ü–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `<—Ç–æ—á–∫–∞> <—Ü–≤–µ—Ç>`.",
        parse_mode="Markdown"
    )
    await callback.answer()


# ---------------- –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–¥–∞—á–∏ ----------------
async def accept_task(callback: CallbackQuery, bot: Bot):
    """–Æ–∑–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–¥–∞—á—É"""
    task_id = int(callback.data.split(":")[1])
    start_time = now_hm()
    assert db.DB is not None

    async with db.DB.execute(
        "SELECT t.squad, t.point, t.color, t.message_id, u.tg_id "
        "FROM tasks t JOIN users u ON u.squad = t.squad "
        "WHERE t.id=? AND t.status=?",
        (task_id, TaskStatus.PENDING)
    ) as cur:
        task = await cur.fetchone()

    if not task or task[3] != callback.message.message_id:
        await callback.answer("‚ö† –≠—Ç–∞ –∑–∞–¥–∞—á–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞.", show_alert=True)
        return

    squad, point, color, _, user_id = task

    # –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É ‚Üí —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∞
    await db.DB.execute(
        "UPDATE tasks SET start_time=?, status=? WHERE id=?",
        (start_time, TaskStatus.ACCEPTED, task_id)
    )

    # –ø–µ—Ä–µ—Å—á—ë—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—Ä—è–¥–∞
    await update_user_status(user_id)
    await db.DB.commit()

    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    await callback.message.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞\n"
        f"–û—Ç—Ä—è–¥: {squad}\n"
        f"–¶–µ–ª—å: {point} ({color})\n"
        f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time}\n\n"
        f"–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /report."
    )

    await notify_admins(bot, f"üìå –û—Ç—Ä—è–¥ {squad} –ø—Ä–∏–Ω—è–ª –∑–∞–¥–∞—á—É: {point} ({color}) –≤ {start_time}")
    await callback.answer()


# ---------------- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å ----------------
async def set_ready(callback: CallbackQuery, bot: Bot):
    """–û—Ç–º–µ—Ç–∏—Ç—å –æ—Ç—Ä—è–¥ –≥–æ—Ç–æ–≤—ã–º"""
    assert db.DB is not None
    async with db.DB.execute(
        "SELECT u.squad, u.bow, u.arrow FROM users u WHERE u.tg_id=?",
        (callback.from_user.id,)
    ) as cur:
        row = await cur.fetchone()
    if not row:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –∫–æ–¥ –æ—Ç—Ä—è–¥–∞.")
        return

    squad, bow, arrow = row

    # –ø—Ä–∏ —Ä—É—á–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ‚Äî –ø–µ—Ä–µ—Å—á—ë—Ç —Å—Ç–∞—Ç—É—Å–∞
    await update_user_status(callback.from_user.id)
    await db.DB.commit()

    await notify_admins(bot, f"‚úÖ –û—Ç—Ä—è–¥ {squad} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n–ü—Ç–∏—Ü–∞: {bow}\n–°–Ω–∞—Ä—è–¥: {arrow}")

    await bot.send_message(
        callback.from_user.id,
        f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω!\n–û—Ç—Ä—è–¥: {squad}\n–ü—Ç–∏—Ü–∞: {bow}\n–°–Ω–∞—Ä—è–¥: {arrow}\n\n–ñ–¥–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."
    )

    try:
        await callback.message.edit_text("–¢—ã –æ—Ç–º–µ—Ç–∏–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å ‚úÖ")
    except Exception:
        pass