from aiogram import Bot, types
from keyboards import ready_squads_keyboard, task_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from utils import notify_admins, now_hm, update_user_status
from asyncpg.exceptions import UniqueViolationError
from db import is_admin
from datetime import datetime, timedelta
from enums import TaskStatus
import db


# ---------------- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ----------------
async def task_cmd(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /task ‚Äî –≤—ã–±–æ—Ä –æ—Ç—Ä—è–¥–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    if not await is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    kb = await ready_squads_keyboard()
    if not kb.inline_keyboard:
        await message.answer("‚ö† –ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –æ—Ç—Ä—è–¥–æ–≤.")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ –æ—Ç—Ä—è–¥ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", reply_markup=kb)


async def choose_target(callback: CallbackQuery):
    """–ê–¥–º–∏–Ω –≤—ã–±—Ä–∞–ª –æ—Ç—Ä—è–¥ ‚Üí —Å–æ–∑–¥–∞—ë–º pending"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    target_uid = int(callback.data.split(":")[1])
    row = await db.DB.fetchrow("SELECT u.squad FROM users u WHERE u.tg_id=$1", target_uid)
    squad = row["squad"] if row else None

    try:
        await db.DB.execute(
            "INSERT INTO pending (admin_id, target_uid, squad, created_at) VALUES ($1, $2, $3, $4)",
            callback.from_user.id, target_uid, squad, datetime.now().isoformat(timespec="seconds")
        )
    except UniqueViolationError:
        await callback.message.answer(
            f"‚ö†Ô∏è –û—Ç—Ä—è–¥—É {squad} —É–∂–µ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –∑–∞–¥–∞—á–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º. –ü–æ–¥–æ–∂–¥–∏—Ç–µ."
        )
        await callback.answer()
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="cancel_task")]
    ])

    await callback.message.edit_text(
        "‚úè –í–≤–µ–¥–∏ —Ü–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`<—Ü–∏—Ñ—Ä–∞> <—Ü–≤–µ—Ç>`.\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏ ¬´–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ¬ª.",
        parse_mode="Markdown",
        reply_markup=kb
    )
    await callback.answer()


async def handle_admin_task_message(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–ª–∏ –∞–¥–º–∏–Ω–æ–º"""
    text = (message.text or "").strip()
    if not text:
        return

    row = await db.DB.fetchrow(
        "SELECT id, target_uid, squad, point, color, is_edit, created_at "
        "FROM pending WHERE admin_id=$1 ORDER BY created_at DESC LIMIT 1",
        message.from_user.id
    )
    if not row:
        return

    pending_id, target_uid, squad = row["id"], row["target_uid"], row["squad"]
    old_point, old_color, is_edit, created_at = row["point"], row["color"], row["is_edit"], row["created_at"]

    # ‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
    try:
        created_at_dt = datetime.fromisoformat(created_at)
    except Exception:
        created_at_dt = datetime.now()

    if datetime.now() - created_at_dt > timedelta(minutes=5):
        await db.DB.execute("DELETE FROM pending WHERE id=$1", pending_id)
        await message.answer("‚ö†Ô∏è –í—Ä–µ–º—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å—Ç–µ–∫–ª–æ (5 –º–∏–Ω—É—Ç). –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    parts = text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ö† –§–æ—Ä–º–∞—Ç: <—Ç–æ—á–∫–∞> <—Ü–≤–µ—Ç>")
        return

    new_point, new_color = parts[0], parts[1]

    rec = await db.DB.fetchrow(
        "INSERT INTO tasks(squad, point, color, status) VALUES ($1, $2, $3, $4) RETURNING id",
        squad, new_point, new_color, TaskStatus.PENDING
    )
    task_id = rec["id"]

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä—è–¥—É
    if is_edit:
        sent = await bot.send_message(
            target_uid,
            f"‚úè –ó–∞–¥–∞—á–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞!\n"
            f"–°—Ç–∞—Ä–∞—è —Ü–µ–ª—å: {old_point} ({old_color})\n"
            f"–ù–æ–≤–∞—è —Ü–µ–ª—å: {new_point} ({new_color})",
            reply_markup=task_keyboard(task_id)
        )
    else:
        sent = await bot.send_message(
            target_uid,
            f"üìã –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è {squad}\n–¶–µ–ª—å: {new_point} ({new_color})",
            reply_markup=task_keyboard(task_id)
        )

    await db.DB.execute("UPDATE tasks SET message_id=$1 WHERE id=$2", sent.message_id, task_id)
    await db.DB.execute("DELETE FROM pending WHERE id=$1", pending_id)

    # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ¬ª
    try:
        await message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    await message.answer(
        f"‚úÖ {'–ó–∞–¥–∞—á–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞' if is_edit else '–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞'} –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {squad}."
    )

# ---------------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ----------------
async def edit_task_cmd(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    rows = await db.DB.fetch(
        "SELECT DISTINCT t.squad FROM tasks t WHERE t.status IN ($1, $2)",
        TaskStatus.PENDING, TaskStatus.ACCEPTED
    )
    squads = [r["squad"] for r in rows]

    if not squads:
        await message.answer("‚ö† –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=s, callback_data=f"edit_squad:{s}")] for s in squads]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –æ—Ç—Ä—è–¥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞—á:", reply_markup=kb)


async def edit_task_choose_squad(callback: CallbackQuery):
    squad = callback.data.split(":")[1]

    rows = await db.DB.fetch(
        "SELECT t.id, t.point, t.color FROM tasks t WHERE t.squad=$1 AND t.status IN ($2, $3)",
        squad, TaskStatus.PENDING, TaskStatus.ACCEPTED
    )

    if not rows:
        await callback.message.answer("‚ö† –£ —ç—Ç–æ–≥–æ –æ—Ç—Ä—è–¥–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{row['point']} ({row['color']})", callback_data=f"edit_task:{row['id']}")]
            for row in rows
        ]
    )
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –æ—Ç—Ä—è–¥–∞ {squad} –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
    await callback.answer()


async def edit_task_select(callback: CallbackQuery, bot: Bot):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    task_id = int(callback.data.split(":")[1])

    row = await db.DB.fetchrow(
        "SELECT t.message_id, u.tg_id, t.point, t.color, t.squad "
        "FROM tasks t JOIN users u ON u.squad = t.squad WHERE t.id=$1",
        task_id
    )
    if not row:
        await callback.answer("‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    msg_id, user_id = row["message_id"], row["tg_id"]
    old_point, old_color, squad = row["point"], row["color"], row["squad"]

    try:
        await bot.edit_message_reply_markup(chat_id=user_id, message_id=msg_id, reply_markup=None)
    except Exception:
        pass

    await db.DB.execute("UPDATE tasks SET status=$1 WHERE id=$2", TaskStatus.ARCHIVED, task_id)

    await db.DB.execute(
        "INSERT INTO pending (admin_id, target_uid, point, color, squad, created_at, is_edit) "
        "VALUES ($1, $2, $3, $4, $5, $6, TRUE)",
        callback.from_user.id, user_id, old_point, old_color, squad,
        datetime.now().isoformat(timespec="seconds")
    )

    await callback.message.edit_text(
        "‚úè –í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Ü–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `<—Ç–æ—á–∫–∞> <—Ü–≤–µ—Ç>`.",
        parse_mode="Markdown"
    )
    await callback.answer()


# ---------------- –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–¥–∞—á–∏ ----------------
async def accept_task(callback: CallbackQuery, bot: Bot):
    task_id = int(callback.data.split(":")[1])
    start_time = now_hm()

    row = await db.DB.fetchrow(
        "SELECT t.squad, t.point, t.color, t.message_id, u.tg_id "
        "FROM tasks t JOIN users u ON u.squad = t.squad "
        "WHERE t.id=$1 AND t.status=$2",
        task_id, TaskStatus.PENDING
    )
    if not row or row["message_id"] != callback.message.message_id:
        await callback.answer("‚ö† –≠—Ç–∞ –∑–∞–¥–∞—á–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞.", show_alert=True)
        return

    squad, point, color, user_id = row["squad"], row["point"], row["color"], row["tg_id"]

    await db.DB.execute(
        "UPDATE tasks SET start_time=$1, status=$2 WHERE id=$3",
        start_time, TaskStatus.ACCEPTED, task_id
    )

    await update_user_status(user_id)

    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    await callback.message.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞\n"
        f"–û—Ç—Ä—è–¥: {squad}\n"
        f"–¶–µ–ª—å: {point} ({color})\n"
        f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time}\n\n"
        f"–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /report."
    )

    await notify_admins(bot, f"üìå –û—Ç—Ä—è–¥ {squad} –ø—Ä–∏–Ω—è–ª –∑–∞–¥–∞—á—É: {point} ({color}) –≤ {start_time}")
    await callback.answer()


# ---------------- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å ----------------
async def set_ready(callback: CallbackQuery, bot: Bot):
    row = await db.DB.fetchrow(
        "SELECT u.squad, u.bow, u.arrow FROM users u WHERE u.tg_id=$1",
        callback.from_user.id
    )
    if not row:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –∫–æ–¥ –æ—Ç—Ä—è–¥–∞.")
        return

    squad, bow, arrow = row["squad"], row["bow"], row["arrow"]

    # üëá –≤—Ä—É—á–Ω—É—é —Å—Ç–∞–≤–∏–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    await db.DB.execute(
        "UPDATE users SET ready=TRUE, status='idle' WHERE tg_id=$1",
        callback.from_user.id
    )

    await notify_admins(bot, f"‚úÖ –û—Ç—Ä—è–¥ {squad} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n–ü—Ç–∏—Ü–∞: {bow}\n–°–Ω–∞—Ä—è–¥: {arrow}")

    await bot.send_message(
        callback.from_user.id,
        f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω!\n–û—Ç—Ä—è–¥: {squad}\n–ü—Ç–∏—Ü–∞: {bow}\n–°–Ω–∞—Ä—è–¥: {arrow}\n\n–ñ–¥–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."
    )

    try:
        await callback.message.edit_text("–¢—ã –æ—Ç–º–µ—Ç–∏–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å ‚úÖ")
    except Exception:
        pass


async def cancel_task(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await db.DB.execute(
        "DELETE FROM pending WHERE admin_id=$1",
        callback.from_user.id
    )
    await callback.message.edit_text("‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()
