from aiogram import Bot, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from utils import update_user_status
from db import is_admin
import db


# ------------------- –û—Ç–ø—Ä–∞–≤–∫–∞ LDK -------------------
async def send_ldk_cmd(message: types.Message):
    uid = message.from_user.id
    print(f"üìå /sendldk –≤—ã–∑–≤–∞–ª {uid}")

    try:
        if not await is_admin(uid):
            await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        assert db.DB is not None
        async with db.DB.execute("SELECT tg_id, squad FROM users") as cur:
            rows = await cur.fetchall()

        if not rows:
            await message.answer("‚ö† –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—Ä—è–¥–æ–≤.")
            return

        # –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ row[...] –∏ row["..."], –Ω–æ –≤ –æ—Ç–ª–∞–¥–∫–µ –≤—ã–≤–µ–¥–µ–º –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        print("üìã users:", rows)

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=row[1], callback_data=f"ldk_target:{row[0]}")]
                for row in rows
            ]
        )

        await message.answer("üìé –í—ã–±–µ—Ä–∏ –æ—Ç—Ä—è–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ LDK —Ñ–∞–π–ª–∞:", reply_markup=kb)

    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –≤ send_ldk_cmd: {e}")
        try:
            await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")
        except:
            pass


async def choose_ldk_target(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    target_uid = int(callback.data.split(":")[1])
    await db.DB.execute(
        "INSERT INTO pending (admin_id, target_uid, created_at, await_ldk) VALUES (?, ?, datetime('now'), 1)",
        (callback.from_user.id, target_uid)
    )
    await db.DB.commit()

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å", callback_data="ldk_cancel")]
        ]
    )
    await callback.message.edit_text("üìé –ü—Ä–∏—à–ª–∏ .ldk —Ñ–∞–π–ª –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:", reply_markup=kb)
    await callback.answer()


async def cancel_ldk(callback: CallbackQuery):
    await db.DB.execute(
        "DELETE FROM pending WHERE admin_id=? AND await_ldk=1",
        (callback.from_user.id,)
    )
    await db.DB.commit()
    await callback.message.edit_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ LDK –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()


async def handle_ldk(message: types.Message, bot: Bot):
    if not message.document or not message.document.file_name.endswith(".ldk"):
        return

    if not await is_admin(message.from_user.id):
        await message.answer("‚ö† –§–∞–π–ª –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è.")
        return

    async with db.DB.execute(
        "SELECT id, target_uid FROM pending WHERE admin_id=? AND await_ldk=1 ORDER BY created_at DESC LIMIT 1",
        (message.from_user.id,)
    ) as cur:
        row = await cur.fetchone()

    if not row:
        await message.answer("‚ö† –§–∞–π–ª –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è.")
        return

    pending_id, target_uid = row

    await bot.send_document(
        target_uid,
        message.document.file_id,
        caption="üìé –ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª LDK —Ñ–∞–π–ª."
    )

    await message.answer("‚úÖ LDK —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ—Ç—Ä—è–¥—É.")

    await db.DB.execute("DELETE FROM pending WHERE id=?", (pending_id,))
    await db.DB.commit()


# ------------------- –í–∏–¥–µ–æ –æ—Ç—á—ë—Ç—ã -------------------
async def handle_video(message: types.Message, bot: Bot):
    """–ü—Ä–∏—ë–º –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—á—ë—Ç–∞"""
    uid = message.from_user.id
    assert db.DB is not None

    async with db.DB.execute(
        """
        SELECT u.squad, u.bow, u.arrow, t.id, t.point, t.color, t.start_time,
               COALESCE(t.result, '–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è')
        FROM tasks t
        JOIN users u ON u.squad = t.squad
        WHERE u.tg_id=? AND t.await_video=1
        ORDER BY t.id DESC LIMIT 1
        """,
        (uid,)
    ) as cur:
        task = await cur.fetchone()

    if not task:
        await message.answer("‚ö† –ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –æ–∂–∏–¥–∞–ª–æ—Å—å.")
        return

    from utils import make_report, now_hm, notify_admins, update_user_status
    from enums import TaskStatus
    from keyboards import ready_kb

    squad, bow, arrow, task_id, point, color, start_time, result = task
    end_time = now_hm()

    final_report = make_report(
        squad, bow, arrow, point, color, start_time, end_time,
        result, video_attached=True
    )

    # –∑–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
    await db.DB.execute(
        "UPDATE tasks SET status=?, report=?, end_time=?, video_attached=1, await_video=0 WHERE id=?",
        (TaskStatus.FINISHED, final_report, end_time, task_id)
    )
    await db.DB.commit()

    # –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—Ä—è–¥–∞ –ø–æ –∑–∞–¥–∞—á–∞–º
    await update_user_status(uid)
    await db.DB.commit()

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    await notify_admins(bot, final_report, video=message.video.file_id)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer_video(
        message.video.file_id,
        caption=final_report + "\n\n–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É:",
        reply_markup=ready_kb()
    )
