from aiogram import Bot, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from utils import update_user_status
from db import is_admin
import db


# ------------------- –û—Ç–ø—Ä–∞–≤–∫–∞ LDK -------------------
async def send_ldk_cmd(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    rows = await db.DB.fetch("SELECT tg_id, squad FROM users")

    if not rows:
        await message.answer("‚ö† –ù–µ—Ç –æ—Ç—Ä—è–¥–æ–≤.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=row["squad"], callback_data=f"ldk_target:{row['tg_id']}")]
            for row in rows
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –æ—Ç—Ä—è–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ LDK —Ñ–∞–π–ª–∞:", reply_markup=kb)


async def choose_ldk_target(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    target_uid = int(callback.data.split(":")[1])
    await db.DB.execute(
        "INSERT INTO pending (admin_id, target_uid, created_at, await_ldk) "
        "VALUES ($1, $2, NOW(), TRUE)",
        callback.from_user.id, target_uid
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å", callback_data="ldk_cancel")]
        ]
    )
    await callback.message.edit_text("üìé –ü—Ä–∏—à–ª–∏ .ldk —Ñ–∞–π–ª –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:", reply_markup=kb)
    await callback.answer()


async def cancel_ldk(callback: CallbackQuery):
    await db.DB.execute(
        "DELETE FROM pending WHERE admin_id=$1 AND await_ldk=TRUE",
        callback.from_user.id
    )
    await callback.message.edit_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ LDK –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()


async def handle_ldk(message: types.Message, bot: Bot):
    if not message.document or not message.document.file_name.endswith(".ldk"):
        return

    if not await is_admin(message.from_user.id):
        await message.answer("‚ö† –§–∞–π–ª –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è.")
        return

    row = await db.DB.fetchrow(
        "SELECT id, target_uid FROM pending WHERE admin_id=$1 AND await_ldk=TRUE "
        "ORDER BY created_at DESC LIMIT 1",
        message.from_user.id
    )

    if not row:
        await message.answer("‚ö† –§–∞–π–ª –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è.")
        return

    pending_id, target_uid = row["id"], row["target_uid"]

    await bot.send_document(
        target_uid,
        message.document.file_id,
        caption="üìé –ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª LDK —Ñ–∞–π–ª."
    )

    await message.answer("‚úÖ LDK —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ—Ç—Ä—è–¥—É.")

    await db.DB.execute("DELETE FROM pending WHERE id=$1", pending_id)


# ------------------- –í–∏–¥–µ–æ –æ—Ç—á—ë—Ç—ã -------------------
async def handle_video(message: types.Message, bot: Bot):
    """–ü—Ä–∏—ë–º –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—á—ë—Ç–∞"""
    uid = message.from_user.id

    row = await db.DB.fetchrow(
        """
        SELECT u.squad, u.bow, u.arrow, t.id, t.point, t.color, t.true_point, t.true_color, t.start_time, COALESCE(t.result, '–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è') AS result
        FROM tasks t
        JOIN users u ON u.squad = t.squad
        WHERE u.tg_id=$1 AND t.await_video=TRUE
        ORDER BY t.id DESC LIMIT 1
        """,
        uid
    )

    if not row:
        await message.answer("‚ö† –ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –æ–∂–∏–¥–∞–ª–æ—Å—å.")
        return

    from utils import make_report, now_hm, notify_admins
    from enums import TaskStatus
    from keyboards import ready_kb

    squad, bow, arrow = row["squad"], row["bow"], row["arrow"]
    task_id, point, color = row["id"], row["point"], row["color"]
    start_time, result = row["start_time"], row["result"]
    true_point, true_color = row["true_point"], row["true_color"]
    end_time = now_hm()

    final_report = make_report(
        squad, bow, arrow, point, color, start_time, end_time,
        result, video_attached=True, true_point=true_point, true_color=true_color
    )

    # –∑–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
    await db.DB.execute(
        "UPDATE tasks SET status=$1, report=$2, end_time=$3, video_attached=TRUE, await_video=FALSE WHERE id=$4",
        TaskStatus.FINISHED, final_report, end_time, task_id
    )

    # –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—Ä—è–¥–∞
    await update_user_status(uid)

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    await notify_admins(bot, final_report, video=message.video.file_id)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer_video(
        message.video.file_id,
        caption=final_report + "\n\n–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É:",
        reply_markup=ready_kb()
    )
