from aiogram import Bot, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from keyboards import report_keyboard, ready_kb
from utils import notify_admins, now_hm, make_report, update_user_status
from enums import TaskStatus
import db


# ---------------- –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞–¥–∞—á ----------------
async def my_tasks(message: types.Message):
    uid = message.from_user.id
    assert db.DB is not None

    async with db.DB.execute("SELECT squad FROM users WHERE tg_id=?", (uid,)) as cur:
        row = await cur.fetchone()
    if not row:
        await message.answer("‚ö† –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    squad = row[0]

    async with db.DB.execute(
        "SELECT id, point, color, status FROM tasks "
        "WHERE squad=? AND status IN (?, ?) ORDER BY id",
        (squad, TaskStatus.PENDING, TaskStatus.ACCEPTED)
    ) as cur:
        tasks = await cur.fetchall()

    if not tasks:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    text = "üìã –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for t in tasks:
        text += f"{t['status']} ‚Äî {t['point']} ({t['color']})\n"

    await message.answer(text)


# ---------------- –°—Ç–∞—Ä—Ç –æ—Ç—á—ë—Ç–∞ ----------------
async def report_start(message: types.Message):
    uid = message.from_user.id
    assert db.DB is not None

    async with db.DB.execute("SELECT squad FROM users WHERE tg_id=?", (uid,)) as cur:
        row = await cur.fetchone()
    if not row:
        await message.answer("‚ö† –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    squad = row[0]

    async with db.DB.execute(
        "SELECT id, point, color, start_time FROM tasks "
        "WHERE squad=? AND status=?",
        (squad, TaskStatus.ACCEPTED)
    ) as cur:
        tasks = await cur.fetchall()

    if not tasks:
        await message.answer("‚ö† –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç—á—ë—Ç–∞.")
        return

    if len(tasks) == 1:
        task = tasks[0]
        await message.answer(
            f"üìã –ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ #{task[0]}:\n"
            f"–¶–µ–ª—å: {task[1]} ({task[2]})\n–ù–∞—á–∞–ª–æ: {task[3]}\n\n–í—ã–±–µ—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
            reply_markup=report_keyboard(task_id=task[0])
        )
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{t['point']} ({t['color']}) ‚Äî {t['start_time']}",
                callback_data=f"choose_task:{t['id']}"
            )] for t in tasks
        ]
    )
    await message.answer("–£ —Ç–µ–±—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=kb)


# ---------------- –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ ----------------
async def choose_task(callback: CallbackQuery):
    task_id = int(callback.data.split(":")[1])
    assert db.DB is not None

    async with db.DB.execute(
        "SELECT point, color, start_time FROM tasks WHERE id=?",
        (task_id,)
    ) as cur:
        task = await cur.fetchone()

    if not task:
        await callback.message.answer("‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await callback.message.edit_text(
        f"üìã –ó–∞–¥–∞—á–∞ #{task_id}:\n"
        f"–¶–µ–ª—å: {task[0]} ({task[1]})\n–ù–∞—á–∞–ª–æ: {task[2]}\n\n–í—ã–±–µ—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
        reply_markup=report_keyboard(task_id=task_id)
    )
    await callback.answer()


# ---------------- –ü—Ä–∏—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ----------------
async def handle_report(callback: CallbackQuery):
    _, task_id, chosen = callback.data.split(":")
    task_id = int(task_id)

    result_map = {"hit": "‚úÖ –ü–æ–ø–∞–¥–∞–Ω–∏–µ", "miss": "‚ùå –ü—Ä–æ–º–∞—Ö", "skip": "‚è∏ –ù–µ –≤—ã–ø–æ–ª–Ω–∏–ª"}
    result = result_map.get(chosen)
    end_time = now_hm()

    assert db.DB is not None
    await db.DB.execute(
        "UPDATE tasks SET end_time=?, result=?, await_video=1 WHERE id=?",
        (end_time, result, task_id)
    )
    await db.DB.commit()

    await callback.message.edit_text(
        "–û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç.\n–ü—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ (–æ–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–æ —Å –ø–æ–¥–ø–∏—Å—å—é).",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ –Ω–µ –±—É–¥–µ—Ç", callback_data=f"novideo:{task_id}")]
        ])
    )
    await callback.answer()


# ---------------- –û—Ç–∫–∞–∑ –æ—Ç –≤–∏–¥–µ–æ ----------------
async def no_video(callback: CallbackQuery):
    task_id = int(callback.data.split(":")[1])
    await callback.message.edit_text(
        "‚ö† –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –±–µ–∑ –≤–∏–¥–µ–æ?\n"
        "–î–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∫–∞—Ä—Ç–∏–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤–∏–¥–µ–æ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, –±–µ–∑ –≤–∏–¥–µ–æ", callback_data=f"confirm_novideo:{task_id}"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∏–¥–µ–æ", callback_data=f"wait_video:{task_id}")
            ]
        ])
    )
    await callback.answer()


async def confirm_no_video(callback: CallbackQuery, bot: Bot):
    """–û—Ç—á—ë—Ç –±–µ–∑ –≤–∏–¥–µ–æ"""
    task_id = int(callback.data.split(":")[1])
    uid = callback.from_user.id
    assert db.DB is not None

    async with db.DB.execute(
        """
        SELECT u.squad, u.bow, u.arrow, t.point, t.color, t.start_time,
               COALESCE(t.result, '–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è')
        FROM tasks t
        JOIN users u ON u.squad = t.squad
        WHERE t.id=? AND u.tg_id=? AND t.await_video=1
        """,
        (task_id, uid)
    ) as cur:
        task = await cur.fetchone()

    if not task:
        await callback.message.answer("‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    squad, bow, arrow, point, color, start_time, result = task
    end_time = now_hm()

    final_report = make_report(
        squad, bow, arrow, point, color, start_time, end_time,
        result, video_attached=False
    )

    # –∑–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
    await db.DB.execute(
        "UPDATE tasks SET status=?, report=?, end_time=?, video_attached=0, await_video=0 WHERE id=?",
        (TaskStatus.FINISHED, final_report, end_time, task_id)
    )
    await db.DB.commit()

    # –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_status(uid)
    await db.DB.commit()

    await notify_admins(bot, final_report)

    await callback.message.edit_text("‚úÖ –û—Ç—á–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –≤–∏–¥–µ–æ.")
    await callback.message.answer(
        final_report + "\n\n–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É:",
        reply_markup=ready_kb()
    )
    await callback.answer()


async def wait_video(callback: CallbackQuery):
    await callback.message.edit_text("üìé –ñ–¥—É –≤–∏–¥–µ–æ. –ü—Ä–∏—à–ª–∏ –µ–≥–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –æ–Ω–æ –ø–æ–π–¥–µ—Ç –∫–∞–∫ –æ—Ç—á–µ—Ç.")
    await callback.answer()
