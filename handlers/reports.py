from aiogram import Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from keyboards import report_keyboard, ready_kb
from utils import notify_admins, now_hm, make_report, update_user_status
from enums import TaskStatus
import db

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç—á—ë—Ç–∞ ---
class ReportStates(StatesGroup):
    await_true_point = State()

# ---------------- –°—Ç–∞—Ä—Ç –æ—Ç—á—ë—Ç–∞ ----------------
async def report_start(message: types.Message):
    uid = message.from_user.id
    row = await db.DB.fetchrow("SELECT squad FROM users WHERE tg_id=$1", uid)
    if not row:
        await message.answer("‚ö† –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    squad = row["squad"]

    tasks = await db.DB.fetch(
        "SELECT id, point, color, start_time FROM tasks "
        "WHERE squad=$1 AND status=$2",
        squad, TaskStatus.ACCEPTED
    )

    if not tasks:
        await message.answer("‚ö† –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç—á—ë—Ç–∞.")
        return

    if len(tasks) == 1:
        task = tasks[0]
        await message.answer(
            f"üìã –ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ #{task['id']}:\n"
            f"–¶–µ–ª—å: {task['point']} ({task['color']})\n–ù–∞—á–∞–ª–æ: {task['start_time']}\n\n–í—ã–±–µ—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
            reply_markup=report_keyboard(task_id=task["id"])
        )
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{t['point']} ({t['color']}) ‚Äî {t['start_time']}",
                callback_data=f"choose_task:{t['id']}"
            )] for t in tasks
        ]
    )
    await message.answer("–£ —Ç–µ–±—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=kb)


# ---------------- –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ ----------------
async def choose_task(callback: CallbackQuery):
    task_id = int(callback.data.split(":")[1])

    task = await db.DB.fetchrow(
        "SELECT point, color, start_time FROM tasks WHERE id=$1",
        task_id
    )
    if not task:
        await callback.message.answer("‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await callback.message.edit_text(
        f"üìã –ó–∞–¥–∞—á–∞ #{task_id}:\n"
        f"–¶–µ–ª—å: {task['point']} ({task['color']})\n–ù–∞—á–∞–ª–æ: {task['start_time']}\n\n–í—ã–±–µ—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
        reply_markup=report_keyboard(task_id=task_id)
    )
    await callback.answer()


# ---------------- –ü—Ä–∏—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ----------------

async def handle_report(callback: CallbackQuery, state: FSMContext):
    _, task_id, chosen = callback.data.split(":")
    task_id = int(task_id)
    end_time = now_hm()

    if chosen == "other":
        # üëá —Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É, –∂–¥—ë–º —É—Ç–æ—á–Ω–µ–Ω–∏—è
        await db.DB.execute(
            "UPDATE tasks SET await_video=FALSE, result=$1, end_time=$2 WHERE id=$3",
            "üéØ –ü–æ–ø–∞–ª –≤ –¥—Ä—É–≥—É—é —Ç–æ—á–∫—É", end_time, task_id
        )
        await db.DB.execute(
            "UPDATE tasks SET report=$1 WHERE id=$2",
            "–û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è...", task_id
        )
        
        # –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
        await state.set_state(ReportStates.await_true_point)

        await callback.message.edit_text(
            "‚úè –£–∫–∞–∂–∏, –≤ –∫–∞–∫—É—é –∏–º–µ–Ω–Ω–æ —Ç–æ—á–∫—É –∏ —Ü–≤–µ—Ç —Ç—ã –ø–æ–ø–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3 –∫—Ä–∞—Å–Ω—ã–π)."
        )
        await callback.answer()
        return

    # –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    result_map = {
        "hit": "‚úÖ –ü–æ–ø–∞–¥–∞–Ω–∏–µ",
        "miss": "‚ùå –ü—Ä–æ–º–∞—Ö",
        "skip": "‚è∏ –ù–µ –≤—ã–ø–æ–ª–Ω–∏–ª"
    }
    result = result_map.get(chosen)

    await db.DB.execute(
        "UPDATE tasks SET end_time=$1, result=$2, await_video=TRUE WHERE id=$3",
        end_time, result, task_id
    )

    await callback.message.edit_text(
        "–û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç.\n–ü—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ (–æ–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–æ —Å –ø–æ–¥–ø–∏—Å—å—é).",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ –Ω–µ –±—É–¥–µ—Ç", callback_data=f"novideo:{task_id}")]
        ])
    )
    await callback.answer()


async def handle_true_point(message: types.Message, state: FSMContext):
    # –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äî –≤—ã—Ö–æ–¥–∏–º –º–æ–ª—á–∞
    if await state.get_state() != ReportStates.await_true_point.state:
        return

    uid = message.from_user.id
    text = (message.text or "").strip()

    # –ò—â–µ–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –∂–¥—ë—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è
    row = await db.DB.fetchrow(
        """
        SELECT t.id
        FROM tasks t
        JOIN users u ON u.squad = t.squad
        WHERE u.tg_id=$1
          AND t.result LIKE 'üéØ%'
          AND t.await_video=FALSE
        ORDER BY t.id DESC
        LIMIT 1
        """,
        uid
    )

    if not row:
        # —Å–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∏ –≤—ã–π–¥–µ–º
        await state.clear()
        return

    task_id = row["id"]

    # –†–∞–∑–±–æ—Ä "A3 –∫—Ä–∞—Å–Ω—ã–π"
    parts = text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ö† –§–æ—Ä–º–∞—Ç: <—Ç–æ—á–∫–∞> <—Ü–≤–µ—Ç> (–Ω–∞–ø—Ä–∏–º–µ—Ä: A3 –∫—Ä–∞—Å–Ω—ã–π)")
        return

    true_point, true_color = parts[0], parts[1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ç–æ—á–Ω—ë–Ω–Ω—É—é —Ü–µ–ª—å
    await db.DB.execute(
        "UPDATE tasks SET true_point=$1, true_color=$2, await_video=TRUE WHERE id=$3",
        true_point, true_color, task_id
    )

    # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ ({true_point} {true_color}). –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ (–∏–ª–∏ –≤—ã–±–µ—Ä–∏ ¬´–í–∏–¥–µ–æ –Ω–µ –±—É–¥–µ—Ç¬ª).",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ –Ω–µ –±—É–¥–µ—Ç", callback_data=f"novideo:{task_id}")]
        ])
    )


# ---------------- –û—Ç–∫–∞–∑ –æ—Ç –≤–∏–¥–µ–æ ----------------
async def no_video(callback: CallbackQuery):
    task_id = int(callback.data.split(":")[1])
    await callback.message.edit_text(
        "‚ö† –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –±–µ–∑ –≤–∏–¥–µ–æ?\n"
        "–î–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∫–∞—Ä—Ç–∏–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤–∏–¥–µ–æ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, –±–µ–∑ –≤–∏–¥–µ–æ", callback_data=f"confirm_novideo:{task_id}"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∏–¥–µ–æ", callback_data=f"wait_video:{task_id}")
            ]
        ])
    )
    await callback.answer()


async def confirm_no_video(callback: CallbackQuery, bot: Bot):
    """–û—Ç—á—ë—Ç –±–µ–∑ –≤–∏–¥–µ–æ"""
    task_id = int(callback.data.split(":")[1])
    uid = callback.from_user.id

    row = await db.DB.fetchrow(
        """
        SELECT u.squad, u.bow, u.arrow, t.point, t.color, t.true_point, t.true_color, t.start_time, COALESCE(t.result, '–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è') AS result
        FROM tasks t
        JOIN users u ON u.squad = t.squad
        WHERE t.id=$1 AND u.tg_id=$2 AND t.await_video=TRUE
        """,
        task_id, uid
    )
    if not row:
        await callback.message.answer("‚ö† –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    squad, bow, arrow = row["squad"], row["bow"], row["arrow"]
    point, color, start_time, result = row["point"], row["color"], row["start_time"], row["result"]
    true_point, true_color = row["true_point"], row["true_color"]
    end_time = now_hm()

    final_report = make_report(
        squad, bow, arrow, point, color, start_time, end_time,
        result, video_attached=False,
        true_point=true_point, true_color=true_color
    )

    await db.DB.execute(
        "UPDATE tasks SET status=$1, report=$2, end_time=$3, video_attached=FALSE, await_video=FALSE WHERE id=$4",
        TaskStatus.FINISHED, final_report, end_time, task_id
    )

    await update_user_status(uid)
    await notify_admins(bot, final_report)

    await callback.message.edit_text("‚úÖ –û—Ç—á–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –≤–∏–¥–µ–æ.")
    await callback.message.answer(
        final_report + "\n\n–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É:",
        reply_markup=ready_kb()
    )
    await callback.answer()


async def wait_video(callback: CallbackQuery):
    await callback.message.edit_text("üìé –ñ–¥—É –≤–∏–¥–µ–æ. –ü—Ä–∏—à–ª–∏ –µ–≥–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –æ–Ω–æ –ø–æ–π–¥–µ—Ç –∫–∞–∫ –æ—Ç—á–µ—Ç.")
    await callback.answer()
