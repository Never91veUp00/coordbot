from aiogram import Bot, types
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from utils import detect_region, validate_phone, notify_admins, generate_code
import db


# --- –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ---
async def handle_registration(message: types.Message, bot: Bot):
    text = (message.text or "").strip()
    if not text:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
    async with db.DB.execute("SELECT 1 FROM users WHERE tg_id=?", (message.from_user.id,)) as cur:
        exists = await cur.fetchone()
    if exists:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—è–≤–∫–∞ –≤ pending
    async with db.DB.execute(
        "SELECT id, squad, phone FROM pending WHERE target_uid=? ORDER BY created_at DESC LIMIT 1",
        (message.from_user.id,)
    ) as cur:
        row = await cur.fetchone()

    if not row:
        # –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å
        await db.DB.execute(
            "INSERT INTO pending (admin_id, target_uid, squad, created_at) VALUES (?, ?, ?, ?)",
            (0, message.from_user.id, text, datetime.now().isoformat(timespec="seconds"))
        )
        await db.DB.commit()
        await message.answer("üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79998887766):")
        return

    pending_id, squad, phone = row

    if not squad:
        # üëà —Å—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ—Å–ª–µ register_request
        await db.DB.execute("UPDATE pending SET squad=? WHERE id=?", (text, pending_id))
        await db.DB.commit()
        await message.answer("üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79998887766):")
        return

    if squad and not phone:
        # –∂–¥—ë–º —Ç–µ–ª–µ—Ñ–æ–Ω
        region = detect_region(message)
        phone_norm = validate_phone(text, region)
        if not phone_norm:
            await message.answer("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –£–∫–∞–∂–∏ –µ–≥–æ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79998887766).")
            return

        await db.DB.execute("UPDATE pending SET phone=? WHERE id=?", (phone_norm, pending_id))
        await db.DB.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        ts = datetime.now().strftime("%d.%m.%Y %H:%M")
        kb = InlineKeyboardMarkup(inline_keyboard=[[ 
            InlineKeyboardButton(text="‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"approve:{pending_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{pending_id}")
        ]])

        await notify_admins(
            bot,
            f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
            f"üïí <i>{ts}</i>\n\n"
            f"üë§ <a href=\"tg://user?id={message.from_user.id}\">–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</a>\n"
            f"–û—Ç—Ä—è–¥: <b>{squad}</b>\n"
            f"‚òé –¢–µ–ª–µ—Ñ–æ–Ω: <a href=\"tel:{phone_norm}\">{phone_norm}</a>\n"
            f"üåç –Ø–∑—ã–∫/—Ä–µ–≥–∏–æ–Ω: {(message.from_user.language_code or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').upper()}",
            video=None,
            reply_markup=kb
        )

        await message.answer("üì® –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ñ–¥–∏ —Ä–µ—à–µ–Ω–∏—è.")
        return

    if squad and phone:
        await message.answer("üì® –¢–≤–æ—è –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ñ–¥–∏ —Ä–µ—à–µ–Ω–∏—è.")


async def register_request(callback: CallbackQuery):
    await callback.message.edit_text("‚úè –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –æ—Ç—Ä—è–¥–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    await db.DB.execute(
        "INSERT OR REPLACE INTO pending (admin_id, target_uid, created_at) VALUES (?, ?, ?)",
        (0, callback.from_user.id, datetime.now().isoformat(timespec="seconds"))
    )
    await db.DB.commit()
    await callback.answer()


async def approve_user(callback: CallbackQuery, bot: Bot):
    pending_id = int(callback.data.split(":")[1])

    async with db.DB.execute(
        "SELECT target_uid, squad, phone FROM pending WHERE id=?",
        (pending_id,)
    ) as cur:
        row = await cur.fetchone()

    if not row:
        await callback.answer("‚ö† –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    uid, squad_name, phone = row
    code = generate_code(squad_name)

    await db.DB.execute(
        "INSERT OR REPLACE INTO users (tg_id, squad, code, bow, arrow, ready, status) "
        "VALUES (?, ?, ?, NULL, NULL, 0, 'idle')",
        (uid, squad_name, code)
    )
    await db.DB.execute("DELETE FROM pending WHERE id=?", (pending_id,))
    await db.DB.commit()

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            uid,
            f"‚úÖ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –æ—Ç—Ä—è–¥ <b>{squad_name}</b>.\n"
            f"–ù–∞–∂–º–∏ /start –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {uid}: {e}")

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É —Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞, –∫—Ç–æ –Ω–∞–∂–∞–ª
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n"
        f"–û—Ç—Ä—è–¥: <b>{squad_name}</b>\n"
        f"ID: <a href=\"tg://user?id={uid}\">{uid}</a>\n"
        f"‚òé –¢–µ–ª–µ—Ñ–æ–Ω: <a href=\"tel:{phone}\">{phone}</a>",
        parse_mode="HTML"
    )

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
    await notify_admins(
        bot,
        f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–æ–º {callback.from_user.id}\n"
        f"–û—Ç—Ä—è–¥: <b>{squad_name}</b>\n"
        f"ID: <a href=\"tg://user?id={uid}\">{uid}</a>\n"
        f"‚òé –¢–µ–ª–µ—Ñ–æ–Ω: <a href=\"tel:{phone}\">{phone}</a>",
        exclude=[callback.from_user.id]   # üëà –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ
    )

    await callback.answer()


async def reject_user(callback: CallbackQuery, bot: Bot):
    pending_id = int(callback.data.split(":")[1])

    async with db.DB.execute("SELECT target_uid FROM pending WHERE id=?", (pending_id,)) as cur:
        row = await cur.fetchone()

    if not row:
        await callback.answer("‚ö† –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    uid = row[0]
    await db.DB.execute("DELETE FROM pending WHERE id=?", (pending_id,))
    await db.DB.commit()

    try:
        await bot.send_message(
            uid,
            "‚ùå –¢–µ–±–µ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.\n"
            "–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å–≤—è–∂–∏—Å—å —Å –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –Ω–∞–∂–º–∏ /support."
        )
    except Exception as e:
        print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")

    ts = datetime.now().strftime("%d.%m.%Y %H:%M")
    await callback.message.edit_text(
        f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç <a href=\"tg://user?id={uid}\">{uid}</a> –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n"
        f"üïí <i>{ts}</i>",
        parse_mode="HTML"
    )

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
    await notify_admins(
        bot,
        f"‚ùå –ê–¥–º–∏–Ω {callback.from_user.id} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <a href=\"tg://user?id={uid}\">{uid}</a>\n"
        f"üïí <i>{ts}</i>",
        exclude=[callback.from_user.id]
    )

    await callback.answer()